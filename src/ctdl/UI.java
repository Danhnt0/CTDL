/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ctdl;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import java.util.Arrays;


import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
         this.wegt.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane2 = new javax.swing.JDesktopPane();
        node = new javax.swing.JRadioButton();
        edg = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        dfs = new javax.swing.JToggleButton();
        bfs = new javax.swing.JToggleButton();
        direct = new javax.swing.JRadioButton();
        wegt = new javax.swing.JRadioButton();
        weight = new javax.swing.JTextField();
        shotest = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        alert = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jDesktopPane2.setBackground(new java.awt.Color(153, 153, 153));
        jDesktopPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        node.setText("Node");
        node.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        node.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeActionPerformed(evt);
            }
        });

        edg.setText("Edge");
        edg.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        edg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgActionPerformed(evt);
            }
        });

        jTextField1.setText("Nhập số Node");
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        dfs.setText("DFS");
        dfs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        dfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfsActionPerformed(evt);
            }
        });

        bfs.setText("BFS");
        bfs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        bfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfsActionPerformed(evt);
            }
        });

        direct.setText("Direction");
        direct.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        wegt.setText("Weight");
        wegt.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        wegt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wegtMouseClicked(evt);
            }
        });
        wegt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wegtActionPerformed(evt);
            }
        });

        weight.setText("Nhập trọng số");
        weight.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        weight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightMouseClicked(evt);
            }
        });
        weight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightActionPerformed(evt);
            }
        });

        shotest.setText("Shotest path");
        shotest.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        shotest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shotestActionPerformed(evt);
            }
        });

        jDesktopPane2.setLayer(node, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(edg, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jTextField1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(clear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(dfs, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(bfs, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(direct, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(wegt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(weight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(shotest, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bfs, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addComponent(node, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(direct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addComponent(dfs, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(wegt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(weight)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(shotest, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(clear)
                .addGap(41, 41, 41)
                .addComponent(node)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(direct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wegt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104)
                .addComponent(dfs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bfs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(shotest)
                .addGap(16, 16, 16)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 592, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        alert.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(alert, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jDesktopPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // get x and y coordinates of the mouse click then draw a node
        int x = evt.getX();
        int y = evt.getY();

        this.alert.setText("");
        this.alert.setText("");
        // check radio button selected
        if (node.isSelected()) {
            if (nodeCounter < size) {

                drawNode(x, y);
                nodeCounter += 1;
                this.link.addVertex(x, y);

            } else {
                this.alert.setForeground(Color.red);
                this.alert.setText("You have reached the maximum number of nodes");
            }
        } else if (edg.isSelected()) {
            if (nodeCounter == 0) {
                JOptionPane.showMessageDialog(null, "Please add a node first");
            } else {
                if (clickCounter == 0) {
                    // get the first node
                    this.firstNode = this.link.findVertex(x, y);
                    if (this.firstNode == null) {
                        clickCounter = 0;
                    } else {
                        clickCounter = 1;
                        this.i = this.link.findIndex(this.firstNode);
                    }

                } else if (clickCounter == 1) {
                    // get the second node
                    this.secondNode = this.link.findVertex(x, y);
                    clickCounter = 0;
                    if (this.secondNode == null) {
                        clickCounter = 1;
                    } else {
                        // add the edge to the graph

                        j = this.link.findIndex(this.secondNode);

                        if (this.graph.isConnect(i, j) || i == j) {
                            this.alert.setForeground(Color.red);
                            this.alert.setText("Edge already exists");
                        } else {

                            if (direct.isSelected()) {

                                if (this.wegt.isSelected()) {
                                    try {
                                        Integer.parseInt(this.weight.getText());
                                    } catch (Exception e) {
                                        this.alert.setForeground(Color.red);
                                        this.alert.setText("Please enter a weight");
                                    }
                                    int value = Integer.parseInt(this.weight.getText());
                                    this.graph.addEdge(i, j, value);
                                    this.weight.setText("");
                                    this.drawArrow(this.firstNode.getX() + 10, this.firstNode.getY() + 10, this.secondNode.getX() + 2, this.secondNode.getY() + 2);
                                    drawWeight(value, this.firstNode.getX() + 10, this.firstNode.getY() + 10, this.secondNode.getX() + 2, this.secondNode.getY() + 2);
                                } else {
                                    this.drawArrow(this.firstNode.getX() + 10, this.firstNode.getY() + 10, this.secondNode.getX() + 2, this.secondNode.getY() + 2);
                                    this.graph.addEdge(i, j);
                                }
                            } else {

                                if (this.wegt.isSelected()) {
                                    try {
                                        Integer.parseInt(this.weight.getText());
                                    } catch (Exception e) {
                                        this.alert.setForeground(Color.red);
                                        this.alert.setText("Please enter a weight");
                                    }
                                    int value = Integer.parseInt(this.weight.getText());
                                    this.graph.addEdge(i, j, value);
                                    this.graph.addEdge(j, i, value);
                                    this.weight.setText("");

                                    this.drawEdge(this.firstNode, this.secondNode);
                                    drawWeight(value, this.firstNode.getX() + 10, this.firstNode.getY() + 10, this.secondNode.getX() + 8, this.secondNode.getY() + 8);
                                } else {
                                    this.drawEdge(this.firstNode, this.secondNode);
                                    this.graph.addEdge(i, j);
                                    this.graph.addEdge(j, i);
                                }

                            }

                        }

                    }
                }
            }
        } else if (dfs.isSelected()) {
            if (nodeCounter == 0) {
                this.alert.setForeground(Color.red);
                this.alert.setText("Please add a node first");
            } else {
                if (clickCounter == 0) {
                    // get the first node
                    this.firstNode = this.link.findVertex(x, y);
                    if (this.firstNode == null) {
                        clickCounter = 0;
                    } else {
                        clickCounter = 1;
                        // this.i = this.link.findIndex(this.firstNode);
                    }

                } else if (clickCounter == 1) {
                    // get the second node
                    this.secondNode = this.link.findVertex(x, y);
                    clickCounter = 0;
                    if (this.secondNode == null) {
                        clickCounter = 1;
                    } else {
                        DFS(this.graph.matrix, firstNode, secondNode);
                    }
                }
            }

        } else if (bfs.isSelected()) {
            if (nodeCounter == 0) {
                this.alert.setForeground(Color.red);
                this.alert.setText("Please add a node first");
            } else {
                if (clickCounter == 0) {
                    // get the first node
                    this.firstNode = this.link.findVertex(x, y);
                    if (this.firstNode == null) {
                        clickCounter = 0;
                    } else {
                        clickCounter = 1;
                        // this.i = this.link.findIndex(this.firstNode);
                    }

                } else if (clickCounter == 1) {
                    // get the second node
                    this.secondNode = this.link.findVertex(x, y);
                    clickCounter = 0;
                    if (this.secondNode == null) {
                        clickCounter = 1;
                    } else {
                        BFS(this.graph.matrix, firstNode, secondNode);
                    }
                }
            }
        }
        else if(this.shotest.isSelected()){
            if (nodeCounter == 0) {
                this.alert.setForeground(Color.red);
                this.alert.setText("Please add a node first");
            } else {
                if (clickCounter == 0) {
                    // get the first node
                    this.firstNode = this.link.findVertex(x, y);
                    if (this.firstNode == null) {
                        clickCounter = 0;
                    } else {
                        clickCounter = 1;
                        this.i = this.link.findIndex(this.firstNode);
                        // Dijkstra(this.graph.matrix, i);
                        dijkstra(this.graph.matrix, i);
                        
                    }

                }
            }
        }


    }//GEN-LAST:event_jPanel1MouseClicked

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        // TODO add your handling code here:
        this.jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        size = Integer.parseInt(this.jTextField1.getText());
        this.graph = new Graph(size);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        this.jPanel1.removeAll();
        this.jPanel1.repaint();
        this.jPanel1.revalidate();
        this.alert.setText("");
        this.size = 0;
        this.nodeCounter = 0;
        this.graph = null;
        this.link = new Link();
        this.jTextField1.setText("Nhập số Node");
    }//GEN-LAST:event_clearActionPerformed

    private void nodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeActionPerformed
        // TODO add your handling code here:
        if (node.isSelected()) {
            this.edg.setSelected(false);
        }
        if (bfs.isSelected()) {
            bfs.setSelected(false);
        }
        if (dfs.isSelected()) {
            dfs.setSelected(false);
        }
    }//GEN-LAST:event_nodeActionPerformed

    private void edgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgActionPerformed
        // TODO add your handling code here:
        if (edg.isSelected()) {
            this.node.setSelected(false);
        }
        if (bfs.isSelected()) {
            bfs.setSelected(false);
        }
        if (dfs.isSelected()) {
            dfs.setSelected(false);
        }
        if (this.shotest.isSelected()){
            this.shotest.setSelected(false);
        }
    }//GEN-LAST:event_edgActionPerformed

    private void dfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfsActionPerformed
        // TODO add your handling code here:
        // check if bfs is selected
        if (bfs.isSelected()) {
            bfs.setSelected(false);
        }
        if (node.isSelected()) {
            node.setSelected(false);
        }
        if (edg.isSelected()) {
            edg.setSelected(false);
        }
        if (this.shotest.isSelected()){
            this.shotest.setSelected(false);
        }
    }//GEN-LAST:event_dfsActionPerformed

    private void bfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfsActionPerformed
        // TODO add your handling code here:
        if (dfs.isSelected()) {
            dfs.setSelected(false);
        }
        if (node.isSelected()) {
            node.setSelected(false);
        }
        if (edg.isSelected()) {
            edg.setSelected(false);
        }
        if (this.shotest.isSelected()){
            this.shotest.setSelected(false);
        }
    }//GEN-LAST:event_bfsActionPerformed

    private void wegtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wegtActionPerformed
        // TODO add your handling code here:
        if (wegt.isSelected()) {
            this.weight.setVisible(true);
            this.weight.setText("weight");
        } else {
            this.weight.setVisible(false);
        }
    }//GEN-LAST:event_wegtActionPerformed

    private void weightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_weightActionPerformed

    private void weightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightMouseClicked
        // TODO add your handling code here:
        this.weight.setText("");
    }//GEN-LAST:event_weightMouseClicked

    private void wegtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wegtMouseClicked
        // TODO add your handling code here:
        if (wegt.isSelected()) {
            this.weight.setVisible(true);
             this.weight.setText("weight");
        } else {
            this.weight.setVisible(false);
        }
    }//GEN-LAST:event_wegtMouseClicked

    private void shotestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shotestActionPerformed
        // TODO add your handling code here:
        if (dfs.isSelected()) {
            dfs.setSelected(false);
        }
        if (node.isSelected()) {
            node.setSelected(false);
        }
        if (edg.isSelected()) {
            edg.setSelected(false);
        }
        
        if (bfs.isSelected()) {
            bfs.setSelected(false);
        }

    }//GEN-LAST:event_shotestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alert;
    private javax.swing.JToggleButton bfs;
    private javax.swing.JButton clear;
    private javax.swing.JToggleButton dfs;
    private javax.swing.JRadioButton direct;
    private javax.swing.JRadioButton edg;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton node;
    private javax.swing.JToggleButton shotest;
    private javax.swing.JRadioButton wegt;
    private javax.swing.JTextField weight;
    // End of variables declaration//GEN-END:variables

    private int nodeCounter = 0;
    private Graph graph;
    private Link link = new Link();
    private int clickCounter = 0;
    private Vertex firstNode;
    private Vertex secondNode;
    private int i, j;
    private int size;

    private void drawEdge(Vertex firstNode, Vertex secondNode) {
        Graphics g = jPanel1.getGraphics();
        g.setColor(Color.black);
        g.drawLine(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);
    }

    private void drawPath(ArrayList<Integer> path) {
        Graphics g = jPanel1.getGraphics();
        g.setColor(Color.green);

        for (int i = 0; i < path.size() - 1; i++) {
            firstNode = link.findVertex(path.get(i));
            secondNode = link.findVertex(path.get(i + 1));
            g.drawLine(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);
        }
    }

    // draw arrow have direction from x1,y1 to x2,y2
    private void drawArrow(int x1, int y1, int x2, int y2) {
        Graphics g = jPanel1.getGraphics();
        g.setColor(Color.black);
        g.drawLine(x1, y1, x2, y2);
        // draw arrow head
        int ARR_SIZE = 4;
        double dx = x2 - x1, dy = y2 - y1;
        double angle = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
        at.concatenate(AffineTransform.getRotateInstance(angle));
        ((Graphics2D) g).transform(at);
        // Draw horizontal arrow starting in (0, 0)
        g.drawLine(0, 0, len, 0);
        g.fillPolygon(new int[]{len, len - ARR_SIZE, len - ARR_SIZE, len},
                new int[]{0, -ARR_SIZE, ARR_SIZE, 0}, 4);
    }

    private void drawVisited(int x, int y) {
        Graphics g = jPanel1.getGraphics();
        Graphics2D g2d = (Graphics2D) g; // Cast to Graphics2D to access setStroke()

        // draw the node circle with black border and white inside, border thickness 2
        g2d.setColor(Color.red);
        g2d.setStroke(new BasicStroke(4));
        g2d.drawOval(x, y, 32, 32);
        // sleep for 0.1 second
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            System.out.println("Interrupted");
        }
    }

    private void drawVisitedEdge(int x1, int y1, int x2, int y2) {
        Graphics g = jPanel1.getGraphics();
        g.setColor(Color.red);
        g.drawLine(x1, y1, x2, y2);
        // sleep for 0.3 second
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            System.out.println("Interrupted");
        }
    }

    private void drawNode(int x, int y) {
        Graphics g = jPanel1.getGraphics();
        Graphics2D g2d = (Graphics2D) g; // Cast to Graphics2D to access setStroke()

        // draw the node circle with black border and white inside, border thickness 2
        g2d.setColor(Color.black);
        g2d.setStroke(new BasicStroke(4));
        g2d.drawOval(x, y, 30, 30);
        g2d.setColor(Color.black);
        g2d.fillOval(x, y, 30, 30);

        // draw the node number
        g2d.setColor(Color.white);
        g2d.drawString(Integer.toString(nodeCounter), x + 12, y + 20);
    }

    private void drawLevel(int x, int y, int data) {
        Graphics g = jPanel1.getGraphics();
        Graphics2D g2d = (Graphics2D) g; // Cast to Graphics2D to access setStroke()

        // draw the node circle with black border and white inside, border thickness 2
        g2d.setColor(Color.blue);
        g2d.setStroke(new BasicStroke(4));

        g2d.drawString(Integer.toString(data), x - 10, y - 10);
    }

    public ArrayList<Integer> DFS(int[][] graph, Vertex startNode, Vertex endNode) {
        ArrayList<Integer> path = new ArrayList<Integer>();
        int start = link.findLevel(startNode);
        int end = link.findLevel(endNode);
        int count = 0;

        int visited[] = new int[graph.length];
        int parent[] = new int[graph.length];
        ArrayStack stack = new ArrayStack(graph.length);
        stack.push(start);
        visited[start] = 1;
        parent[start] = - 1;
        // drawLevel(startNode.getX(), startNode.getY(), count);
        drawVisited(startNode.getX(), startNode.getY());
        while (!stack.isEmpty()) {
            int top = stack.peek();
            int i = 0;
            // if(stack.isEmpty()){
            //     count = 0;
            // }
            while (i < graph.length) {
                if (graph[top][i] != 0 && visited[i] == 0) {
                    Vertex firstNode = link.findVertex(top);
                    Vertex secondNode = link.findVertex(i);
                    drawVisited(secondNode.getX(), secondNode.getY());
                    drawVisitedEdge(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);
                    // drawLevel(secondNode.getX(), secondNode.getY(), count);
                    stack.push(i);
                    count++;
                    visited[i] = 1;
                    parent[i] = top; // Save the parent of the visited vertex
                    if (i == end) { // If we have reached the end node

                        int cur = end;
                        while (cur != -1) { // Use the "parent" array to retrace the path from start to end
                            path.add(cur);
                            cur = parent[cur];
                        }
                        path = reverse(path);
                        this.alert.setForeground(Color.green);
                        this.alert.setText("Path found:  " + path.toString());
                        drawPath(path);
                        return path;
                    }
                    top = i;
                    i = 0;
                    continue;
                }
                i++;
            }
            stack.pop();
            count--;
        }
        this.alert.setForeground(Color.red);
        this.alert.setText("No path found");
        return path;
    }

    private ArrayList<Integer> reverse(ArrayList<Integer> path) {
        ArrayList<Integer> reversedPath = new ArrayList<Integer>();
        for (int i = path.size() - 1; i >= 0; i--) {
            reversedPath.add(path.get(i));
        }
        return reversedPath;
    }

    private ArrayList<Integer> BFS(int[][] graph, Vertex startNode, Vertex endNode) {
        ArrayList<Integer> path = new ArrayList<Integer>();
        int start = link.findLevel(startNode);
        int end = link.findLevel(endNode);
        int visited[] = new int[graph.length];
        int parent[] = new int[graph.length];
        ArrayQueue queue = new ArrayQueue(graph.length);
        queue.enqueue(start);
        visited[start] = 1;
        parent[start] = - 1;
        drawVisited(startNode.getX(), startNode.getY());
        // drawLevel(startNode.getX(), startNode.getY(), queue.size()-1);

        while (!queue.isEmpty()) {
            int front = queue.dequeue();
            int i = 0;
            Vertex firstNode = link.findVertex(front);
            while (i < graph.length) {
                if (graph[front][i] != 0 && visited[i] == 0) {
                    Vertex secondNode = link.findVertex(i);
                    drawVisited(secondNode.getX(), secondNode.getY());
                    drawVisitedEdge(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);
                    // drawLevel(secondNode.getX(), secondNode.getY(), queue.size());
                    queue.enqueue(i);
                    visited[i] = 1;
                    parent[i] = front; // Save the parent of the visited vertex
                    if (i == end) { // If we have reached the end node
                        int cur = end;
                        while (cur != -1) { // Use the "parent" array to retrace the path from start to end
                            path.add(cur);
                            cur = parent[cur];
                        }
                        path = reverse(path);
                        this.alert.setForeground(Color.green);
                        this.alert.setText("Path found:  " + path.toString());
                        drawPath(path);
                        return path;
                    }
                }
                i++;
            }
        }

        this.alert.setForeground(Color.red);
        this.alert.setText("No path found");
        return path;

    }

    // private ArrayList<Integer> BFS( Vertex startNode, Vertex endNode) {
    //     ArrayList<Integer> path = new ArrayList<Integer>();
    //     int start = link.findLevel(startNode);
    //     int end = link.findLevel(endNode);
    //     int visited[] = new int[this.graph.getSize()];
    //     int parent[] = new int[this.graph.getSize()];
    //     ArrayQueue queue = new ArrayQueue(this.graph.getSize());
    //     queue.enqueue(start);
    //     visited[start] = 1;
    //     parent[start] = - 1;
    //     drawVisited(startNode.getX(), startNode.getY());
    //     while(!queue.isEmpty()){
    //         int front = queue.dequeue();
    //         int[] neighbors = this.graph.findNeighbor(front);
    //         System.out.println(queue.toString());
    //         Vertex firstNode = link.findVertex(front);
    //         for (int i = 0; i < neighbors.length; i++) {
    //             if(visited[neighbors[i]] == 0){
    //                 System.out.println(queue.toString());
    //                 Vertex secondNode = link.findVertex(neighbors[i]);
    //                 drawVisited(secondNode.getX(), secondNode.getY());
    //                 drawVisitedEdge(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);
    //                 queue.enqueue(neighbors[i]);
    //                 visited[neighbors[i]] = 1;
    //                 parent[neighbors[i]] = front;
    //                 if(neighbors[i] == end){
    //                     int cur = end;
    //                     while(cur != -1){
    //                         path.add(cur);
    //                         cur = parent[cur];
    //                     }
    //                     path = reverse(path);
    //                     this.alert.setForeground(Color.green);
    //                     this.alert.setText("Path found:  " + path.toString() );
    //                     drawPath(path);
    //                     return path;
    //                 }
    //             }
    //         }
    //     }
    //     this.alert.setForeground(Color.red);
    //     this.alert.setText("No path found");
    //     return path;
    // }

    private void drawWeight(int value, int x1, int y1, int x2, int y2) {
        Graphics g = jPanel1.getGraphics();
        Graphics2D g2d = (Graphics2D) g; // Cast to Graphics2D to access setStroke()

        // draw the node circle with black border and white inside, border thickness 2
        g2d.setColor(Color.blue);
        g2d.setStroke(new BasicStroke(4));

        g2d.drawString(Integer.toString(value), (x1 + x2) / 2, (y1 + y2) / 2);
    }

    private void drawDistance(int value, int x, int y) {
        Graphics g = jPanel1.getGraphics();
        Graphics2D g2d = (Graphics2D) g; // Cast to Graphics2D to access setStroke()

        // draw the node circle with black border and white inside, border thickness 2
        g2d.setColor(Color.white);
        g2d.setStroke(new BasicStroke(4));
        
        // remove the previous value use white color rectangle
        g2d.fillRect(x, y - 15, 15, 28);


        g2d.setColor(Color.red);
        g2d.setStroke(new BasicStroke(4));

        g2d.drawString(Integer.toString(value), x, y);

    }


    // shortest path

      //_____________________________Dijkstra use unSortedpriorityQueue____________________________
    public int[] dijkstra(int[][] graph, int start) {
        int[] dist = new int[this.graph.getSize()];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[start] = 0;
        
        boolean[] visited = new boolean[this.graph.getSize()];

        while (true) {
            int u = -1;
            for (int i = 0; i < this.graph.getSize(); i++) {
                if (!visited[i] && (u == -1 || dist[i] < dist[u])) {
                    u = i;
                }
            }

            if (u == -1) {
                break;
            }

            visited[u] = true;

            for (int v = 0; v < this.graph.getSize(); v++) {
                if (graph[u][v] != 0) {
                    int distance = dist[u] + graph[u][v];
                    if (distance < dist[v]) {
                        dist[v] = distance;
                        this.firstNode = link.findVertex(u);
                        this.secondNode = link.findVertex(v);
                        drawVisitedEdge(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);
                        drawDistance(distance, secondNode.getX() - 8, secondNode.getY() - 8);
                    }
                }
            }
        }
        this.alert.setForeground(Color.green);
        this.alert.setText("Solution:  " + solution(dist));
        return dist;
    }


    //_____________________________Dijkstra use SortedpriorityQueue____________________________

    public int[] Dijkstra(int[][] graph, int start){

        int[] dist = new int[this.graph.getSize()]; 
        Arrays.fill(dist, Integer.MAX_VALUE);
        SortedArrayPriorityQueue<Integer,Integer> priorityQueue = new SortedArrayPriorityQueue<Integer,Integer>( this.graph.getSize() );
        // boolean[] visited = new boolean[this.graph.getSize()];
        ArrayList<Integer> visited = new ArrayList<Integer>();
        
        dist[start] = 0;
        

        priorityQueue.insert(start, dist[start]);

        while(visited.size() != this.graph.getSize()){
            int u = (int) priorityQueue.removeMin().getKey();
            visited.add(u);
            drawVisitedEdge(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);

            for (int v = 0; v < this.graph.getSize(); v++) {
                if (graph[u][v] != 0) {
                    int distance = dist[u] + graph[u][v];
                    if (distance < dist[v]) {
                        dist[v] = distance;
                        this.firstNode = link.findVertex(u);
                        this.secondNode = link.findVertex(v);
                        drawVisitedEdge(firstNode.getX() + 10, firstNode.getY() + 10, secondNode.getX() + 8, secondNode.getY() + 8);
                        drawDistance(distance, secondNode.getX() - 8, secondNode.getY() - 8);
                        priorityQueue.insert(v, dist[v]);
                    }
                }
            }
        }

        this.alert.setForeground(Color.green);
        this.alert.setText("Solution:  " + solution(dist));
        return dist;

    }

    private String solution(int[] value){
        String result = "";
        for (int i = 0; i < value.length; i++) {
            result += "Node " + i + " : " + value[i] + "    ; ";
        }
        return result;
    }


}
